openapi: 3.0.1
info:
  title: Api User
  version: 1.0.0
servers:
  - url: "http://localhost:3000/"
    description: Local Server

tags:
  - name: User
    description: User handler

paths:
  /user/login:
    post:
      tags:
        - User
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyLoginPost"
        required: true
      responses:
        200:
          description: (OK) El usuario se ha logeado exitósamente 
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: User token
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1eGdFdEFFUlBCNzkyb1JkQmFxRiIsIm5hbWUiOiJBZ3VzdGluYSIsIm1haWwiOiJhZ3VzLmdhcmNpYXJleUBnbWFpbC5jb20iLCJleHAiOjE2Mjk2MDk3OTF9.fpM55flnN-KNXodoa9x-MryQxPIYo82Rh4ZGuWIXKMQ
        400:
          $ref: "#/components/responses/BadRequest"
          
        404:
          $ref: "#/components/responses/NotFound"
        
        500:
          $ref: "#/components/responses/ServerError"

  /user/add:
    post:
      tags:
        - User
      summary: Create user
      security:
        - userToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyAddPost"
        required: true
      responses:
        200:
          description: (OK) Usuario creado con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized' 
        500:
          $ref: "#/components/responses/ServerError"
        535:
          $ref: "#/components/responses/EmailError"
      
  /user/recoverPassword:
    post:
      tags:
        - User
      summary: Recover password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyRecoverPasswordPost"
        required: true
      responses:
        200:
          description: (OK) La nueva contraseña se envió a su mail
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
        535:
          $ref: "#/components/responses/EmailError"
          
  /user/myProfile:
    get:
      tags:
      - User
      summary: Get My Profile
      security:
        - userToken: []
      responses:
        200:
          description: (OK) El usuario se obtuvo correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
        401:
          $ref: '#/components/responses/Unauthorized' 
        500:
          $ref: '#/components/responses/ServerError'
          
  /user/:
    get:
      tags:
      - User
      summary: Get Users
      security:
        - userToken: []
      parameters:
      - name: id
        in: query
        required: false
        description: Legajo del usuario
        example: 1000
        schema:
          type: string
      - name: role
        in: query
        required: false
        description: Rol del usuario
        example: Encargado stock
        schema:
          type: string
      responses:
        200:
          description: (OK) Los usuarios se obtuvieron correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetUsers'
        401:
          $ref: '#/components/responses/Unauthorized' 
        500:
          $ref: '#/components/responses/ServerError'
          
  /user/updatePassword:
    put:
      tags:
        - User
      summary: Update password
      security:
        - userToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyPasswordPut"
      responses:
        200:
          description: (OK) Contraseña actualizada con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
          
  /user/updateUser:
    put:
      tags:
        - User
      summary: Update user
      security:
        - userToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyUserPut"
      responses:
        200:
          description: (OK) Usuario actualizado con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
          
  /user/put/{id}:
    put:
      tags:
        - User
      summary: Update user by Admin
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        example: 1234
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyUserPutByAdmin"
      responses:
        200:
          description: (OK) Usuario actualizado con éxito
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
          
  /user/deleteUser/{id}:
    put:
      tags:
        - User
      summary: Deactivate user
      security:
        - userToken: []
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        example: 1234
        schema:
          type: string
      responses:
        200:
          description: (OK) Usuario dado de baja con éxito
        401:
          $ref: '#/components/responses/Unauthorized' 
        500:
          $ref: "#/components/responses/ServerError"
  

components:
  securitySchemes:
    userToken:
      type: http
      scheme: bearer
      description: Example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6Nzg5NDU2LCJuYW1lIjoiQWd1c3RpbmEgR2FyY8OtYSBSZXkiLCJyb2xlIjoiQWRtaW4iLCJzdGF0ZSI6dHJ1ZSwiZXhwIjoxNjMzOTk1OTMxfQ.ZQh3DtulWkIGQHJqrFP5Ouqk8Qvn3LTb28_sVsy-NCY
      
  responses:
    Unauthorized:
      description: (Unauthorized) Usuario no autorizado

    NotFound:
      description: (Not Found) Datos no encontrados

    BadRequest:
      description: (Bad Request) Campos incompletos o erróneos

    ServerError:
      description: (Internal Server Error) Error interno del servidor

    EmailError:
      description: (Incorrect authentication data) Error en el envío de mail
      
  schemas:
    BodyLoginPost:
      type: object
      required:
        - id
        - password
      properties:
        id:
          type: number
          example: 789456
        password:
          type: string
          example: Testigos123
          
    BodyAddPost:
      type: object
      required:
        - id
        - name
        - dni
        - mail
        - tel
        - password
        - role
      properties:
        id:
          type: number
          example: 1234
        name:
          type: string
          example: Facundo Gomez
        dni:
          type: number
          example: 41568754
        mail:
          type: string
          example: facuegomez@hotmail.com
        tel:
          type: number
          example: 3516978812
        password:
          type: string
          example: Testigos123
        role:
          type: string
          enum: [Admin, Gerencia, Encargado stock, Operario stock, Operario almacén]
          example: Gerencia

    BodyRecoverPasswordPost:
      type: object
      required:
        - mail
      properties:
        mail:
          type: string
          example: agus.garciarey@gmail.com
          
    BodyPasswordPut:
      type: object
      required:
        - currentPassword
        - newPassword
        - confirmNewPassword
      properties:
        currentPassword:
          type: string
          example: Testigos123
        newPassword:
          type: string
          example: Testigos1234
        confirmNewPassword:
          type: string
          example: Testigos1234
          
    BodyUserPut:
      type: object
      required:
        - name
        - mail
        - tel
      properties:
        name:
          type: string
          example: Facundo Gomez
        mail:
          type: string
          example: facuegomez@hotmail.com
        tel:
          type: number
          example: 3516978812
          
    BodyUserPutByAdmin:
      type: object
      required:
        - id
        - name
        - dni
        - mail
        - tel
        - role
      properties:
        id:
          type: number
          example: 1234
        name:
          type: string
          example: Facundo Gomez
        dni:
          type: number
          example: 41568754
        mail:
          type: string
          example: facuegomez@hotmail.com
        tel:
          type: number
          example: 3516978812
        role:
          type: string
          enum: [Admin, Gerencia, Encargado stock, Operario stock, Operario almacén]
          example: Gerencia
    
    ResponseUser:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        dni:
          type: number
        tel:
          type: string
        mail:
          type: string
        role:
          type: string
        state:
          type: string
    
    ResponseGetUsers:
      type: array
      items:
          $ref: '#/components/schemas/ResponseUser'